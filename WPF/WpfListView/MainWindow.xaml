<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfListView"
        xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" x:Class="WpfListView.MainWindow"
        mc:Ignorable="d"
        Title="MainWindow" Height="226" Width="800">

	<Window.Resources>
		<DataTemplate x:Key="GridViewColumnHeaderTemplate">
			<TextBlock Text="{Binding}" Foreground="Yellow" />
		</DataTemplate>
		<Style x:Key="GridViewColumnHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
			<Setter Property="BorderBrush" Value="Black"/>
			<Setter Property="BorderThickness" Value="0,2,0,0"/>
			<Setter Property="Background" Value="Black"/>
			<Setter Property="Foreground" Value="Red"/>
		</Style>
		<Style TargetType="{x:Type RadioButton}">
			<Setter Property="Foreground" Value="White"/>
		</Style>
		<Style TargetType="{x:Type ListView}">
			<Setter Property="Background" Value="Black"/>
			<Setter Property="Foreground" Value="Black"/>
			<Setter Property="BorderBrush" Value="White"/>
			<Setter Property="BorderThickness" Value="1,1,1,1"/>
		</Style>
		<Style TargetType="{x:Type ListViewItem}">
			<Setter Property="Background" Value="White"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ListViewItem}">
						<Grid x:Name="background">
							<ContentControl x:Name="foreground">
								<GridViewRowPresenter x:Name="rowPresenter" />
							</ContentControl>
							<ItemsControl ItemsSource="{Binding Columns, ElementName=rowPresenter}">
								<ItemsControl.ItemsPanel>
									<ItemsPanelTemplate>
										<StackPanel Orientation="Horizontal" Margin="2,0,0,0" />
									</ItemsPanelTemplate>
								</ItemsControl.ItemsPanel>

								<ItemsControl.ItemTemplate>
									<DataTemplate>
										<Border BorderBrush="Black" BorderThickness="0,0,1,1" Width="{Binding ActualWidth}" />
									</DataTemplate>
								</ItemsControl.ItemTemplate>
							</ItemsControl>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsSelected" Value="True">
								<Setter TargetName="background" Property="Background" Value="{x:Static SystemColors.HighlightBrush}" />
								<Setter TargetName="foreground" Property="Foreground" Value="{x:Static SystemColors.HighlightTextBrush}" />
							</Trigger>
							<Trigger Property="IsSelected" Value="False">
								<Setter TargetName="background" Property="Background" Value="White" />
								<Setter TargetName="foreground" Property="Foreground" Value="Black" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style TargetType="{x:Type DataGrid}">
			<Setter Property="Background" Value="Black"/>
		</Style>
		<Style TargetType="{x:Type DataGridColumnHeader}">
			<Setter Property="BorderBrush" Value="White"/>
			<Setter Property="BorderThickness" Value="0,0,1,0"/>
			<Setter Property="Foreground" Value="White"/>
		</Style>
		<Style TargetType="{x:Type DataGridRow}">
			<Setter Property="Background" Value="White"/>
		</Style>
		<Style TargetType="{x:Type DataGridCell}">
			<Setter Property="BorderThickness" Value="0,0,0,0"/>
		</Style>
		<Style x:Key="FocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
		<SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
		<SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
		<SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
		<SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
		<SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
		<SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
		<SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
		<SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
		<Style TargetType="{x:Type ToggleButton}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
			<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
			<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
							<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="Button.IsDefaulted" Value="true">
								<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
								<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
								<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
								<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
								<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
							</Trigger>
							<Trigger Property="IsChecked" Value="True">
								<Setter Property="Background" TargetName="border" Value="Red"/>
								<Setter Property="BorderBrush" TargetName="border" Value="Green"/>
								<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
		<Style TargetType="{x:Type GroupBox}">
			<Setter Property="BorderBrush" Value="#D5DFE5"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type GroupBox}">
						<Grid SnapsToDevicePixels="true">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="6"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="6"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="*"/>
								<RowDefinition Height="6"/>
							</Grid.RowDefinitions>
							<Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="4" Grid.Column="0" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3"/>
							<Border BorderBrush="White" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3">
								<Border.OpacityMask>
									<MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
										<Binding ElementName="Header" Path="ActualWidth"/>
										<Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
										<Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
									</MultiBinding>
								</Border.OpacityMask>
							</Border>
							<Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
								<ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</Border>
							<ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	</Window.Resources>

	<Window.Style>
		<Style TargetType="{x:Type Window}">
			<Setter Property="Background" Value="Black"/>
			<Setter Property="Foreground" Value="White"/>
		</Style>
	</Window.Style>

	<Window.DataContext>
		<local:ViewModel />
	</Window.DataContext>

	<Grid VerticalAlignment="Center">
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="2*"/>
			<ColumnDefinition Width="1*"/>
			<ColumnDefinition Width="1*"/>
			<ColumnDefinition Width="1*"/>
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="5*"/>
			<RowDefinition Height="2*"/>
		</Grid.RowDefinitions>
		<ListView ItemsSource="{Binding ItemList}" Grid.Row="0" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center">
			<ListView.View>
				<GridView ColumnHeaderTemplate="{StaticResource GridViewColumnHeaderTemplate}"
						  ColumnHeaderContainerStyle="{StaticResource GridViewColumnHeaderStyle}">
					<GridViewColumn Header="ID" DisplayMemberBinding="{Binding ID}" Width="30" />
					<GridViewColumn Header="Name" DisplayMemberBinding="{Binding Name}" Width="150" />
					<GridViewColumn Header="Age" DisplayMemberBinding="{Binding Age}" Width="50" />
				</GridView>
			</ListView.View>
		</ListView>
		<DataGrid ItemsSource="{Binding ItemList}" Grid.Row="0" Grid.Column="1"
				  HeadersVisibility ="Column" HorizontalAlignment="Center" VerticalAlignment="Center" BorderBrush="White"/>
		<StackPanel Grid.Row="0" Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center"
					Margin="10">
			<GroupBox Header="Header" BorderThickness="1.8">
				<StackPanel Margin="5">
					<RadioButton Content="Case1" />
					<RadioButton Content="Case2" />
					<RadioButton Content="Case3" />
					<RadioButton Content="Case4" />
				</StackPanel>
			</GroupBox>
		</StackPanel>
		<Canvas VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="0" Grid.Column="3">
			<Rectangle Width="30" Height="30" Fill="Lime" RenderTransformOrigin="0.5,0.5" >
				<Rectangle.RenderTransform>
					<TransformGroup>
						<ScaleTransform/>
						<SkewTransform/>
						<RotateTransform x:Name="rect1"/>
						<TranslateTransform X="-15" Y="-15"/>
					</TransformGroup>
				</Rectangle.RenderTransform>
				<Rectangle.Triggers>
					<EventTrigger RoutedEvent="Rectangle.Loaded">
						<BeginStoryboard>
							<Storyboard>
								<DoubleAnimation 
									Storyboard.TargetName="rect1"
									Storyboard.TargetProperty="Angle"
									From="0" To="360" RepeatBehavior="Forever"  Duration="0:0:5" />
							</Storyboard>
						</BeginStoryboard>
					</EventTrigger>
				</Rectangle.Triggers>
			</Rectangle>
		</Canvas>
		<StackPanel Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="4" VerticalAlignment="Center">
			<ToggleButton Content="SW1" />
			<ToggleButton Content="SW2" />
		</StackPanel>
	</Grid>
</Window>
