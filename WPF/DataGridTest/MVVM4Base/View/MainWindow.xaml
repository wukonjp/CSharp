<Window x:Class="MVVM4Base.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MVVM4Base"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
		xmlns:c="clr-namespace:MVVM4Base.Common"
        mc:Ignorable="d"
        DataContext="{Binding Source={StaticResource Locator}, Path=Main}"
        Title="MainWindow"
		Height="450"
		Width="Auto"
		SizeToContent="Width"
		WindowStartupLocation="CenterScreen"
		Name="mainWindow">

	<i:Interaction.Triggers>
		<i:EventTrigger EventName="Loaded">
			<i:InvokeCommandAction Command="{Binding LoadedCommand}" />
		</i:EventTrigger>
		<i:EventTrigger EventName="Closing">
			<c:QuitConfirmAction />
		</i:EventTrigger>
		<c:StringMessageTrigger Message="Quit">
			<c:WindowCloseAction />
		</c:StringMessageTrigger>
	</i:Interaction.Triggers>

	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="190*"/>
			<RowDefinition Height="229*"/>
		</Grid.RowDefinitions>

		<!-- 同一コレクションへ複数のItemsControlでアクセス（1つ目のビューを使用） -->
		<DataGrid x:Name="dataGrid1" ItemsSource="{Binding DataService.PeopleViewSource1.View}"
				  AlternationCount="{Binding Items.Count, RelativeSource={RelativeSource Self}}"
				  AutoGenerateColumns="False" Grid.Row="0" SelectionMode="Single" CanUserAddRows="True">
			<!-- 行ヘッダ -->
			<!-- AlternationCountとAlternationIndexを応用した自動インデックス（ソートしても変化しない） -->
			<DataGrid.RowHeaderStyle>
				<Style TargetType="{x:Type DataGridRowHeader}">
					<Setter
						Property="Content"
						Value="{Binding Path=(ItemsControl.AlternationIndex), RelativeSource={RelativeSource AncestorType=DataGridRow}, Mode=OneWay}"/>
				</Style>
			</DataGrid.RowHeaderStyle>
			<DataGrid.Columns>
				<!-- AlternationCountとAlternationIndexを応用した自動インデックス（ソートしても変化しない） -->
				<DataGridTemplateColumn Header="Index">
					<DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<!-- （添付プロパティは丸括弧で括る） -->
							<TextBlock Text="{Binding Path=(ItemsControl.AlternationIndex), RelativeSource={RelativeSource AncestorType=DataGridRow}, Mode=OneWay}">
								<TextBlock.InputBindings>
									<!-- マウスイベントでコマンドを呼び出す方式（指定列のセルに適用） -->
									<MouseBinding MouseAction="LeftDoubleClick"
										Command="{Binding DataContext.CellDoubleClickedCommand, ElementName=mainWindow}" />
								</TextBlock.InputBindings>
							</TextBlock>
						</DataTemplate>
					</DataGridTemplateColumn.CellTemplate>
				</DataGridTemplateColumn>

				<DataGridTextColumn Header="番号" Binding="{Binding ID}" />
				<DataGridTextColumn Header="名前" Binding="{Binding Name}" />
				<DataGridTextColumn Header="年齢" Binding="{Binding Age}" />

				<DataGridTemplateColumn Header="性別" SortMemberPath="Gender">
					<DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<ComboBox SelectedIndex="{Binding Gender, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
								<ComboBoxItem Content="男性" />
								<ComboBoxItem Content="女性" />
							</ComboBox>
						</DataTemplate>
					</DataGridTemplateColumn.CellTemplate>
				</DataGridTemplateColumn>
			</DataGrid.Columns>
		</DataGrid>

		<!-- 同一コレクションへ複数のItemsControlでアクセス（2つ目のビューを使用） -->
		<DataGrid x:Name="dataGrid2" ItemsSource="{Binding DataService.PeopleViewSource2.View}"
				  AutoGenerateColumns="False" Grid.Row="1" IsReadOnly="True" SelectionMode="Single" CanUserAddRows="False">
			<DataGrid.CellStyle>
				<Style TargetType="DataGridCell">
					<!-- バインドしたプロパティで背景を制御（全セルに適用） -->
					<!--Setter Property="Background" Value="{Binding DataContext.BackgroundBrush, ElementName=mainWindow}" /-->
					<Setter Property="Background" Value="{Binding DataContext.BackgroundBrush, RelativeSource={RelativeSource AncestorType=Window}}" />
					<!-- イベントハンドラを直接呼び出す方式（全セルに適用、EventSetterはDependencyObjectを継承していないのでバインドできない） -->
					<EventSetter Event="MouseDoubleClick" Handler="DataGridCell_MouseDoubleClick" />
				</Style>
			</DataGrid.CellStyle>
			<DataGrid.Columns>
				<DataGridTextColumn Header="番号" Binding="{Binding ID}" />
				<DataGridTextColumn Header="名前" Binding="{Binding Name}" />
				<DataGridTextColumn Header="年齢" Binding="{Binding Age}" />
				<DataGridTemplateColumn Header="性別" SortMemberPath="Gender" >
					<DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<ComboBox SelectedIndex="{Binding Gender}" IsHitTestVisible="False" Focusable="False" IsTabStop="False" >
								<ComboBoxItem Content="男性" />
								<ComboBoxItem Content="女性" />
							</ComboBox>
						</DataTemplate>
					</DataGridTemplateColumn.CellTemplate>
				</DataGridTemplateColumn>
			</DataGrid.Columns>
		</DataGrid>

		<!-- （パターンその２）-->
		<!-- 単一ソースの変更イベントを複数のViewが監視＆アクションするとアクションが複数回呼ばれてしまう -->
		<!-- これを防ぐためダミーコントロールを用意して監視＆アクションを1箇所に集約する -->
		<!-- 同一コレクションへ複数のItemsControlでアクセス（デフォルトビューを使用） -->
		<ItemsControl x:Name="dummy" ItemsSource="{Binding DataService.People}">
			<ItemsControl.ItemTemplate>
				<DataTemplate>
					<FrameworkElement Visibility="Collapsed">
						<i:Interaction.Triggers>
							<i:PropertyChangedTrigger Binding="{Binding Gender}">
								<i:InvokeCommandAction
									Command="{Binding DataContext.GenderChangedCommand, ElementName=mainWindow}"
									CommandParameter="{Binding}"/>
							</i:PropertyChangedTrigger>
						</i:Interaction.Triggers>
					</FrameworkElement>
				</DataTemplate>
			</ItemsControl.ItemTemplate>
		</ItemsControl>
	</Grid>
</Window>
